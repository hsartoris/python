def read_board(board_filename):
	bd = []
	for line in open(board_filename):
		bd.append(line.strip())
	return bd

def print_board(board):
	# This function should take in a list of strings and print the board
	for line in board:
		t = ""
		for c in line:
			t += c
			t += " "
		print t

def find_word_in_puzzle(board, word):
	# This function shoud call eight functions (one for each direction)
	# An example call:  is_word_going_right(board, word, row, col)
	# See the HW 5 pdf.
	print ""

def right(board, word):
	for i in range(0, len(board)):
		for j in range(0, len(board[i]):
			
	
	return [False, 0, 0]

def left(board, word):
	
	return [False, 0, 0]

def down(board, word):
	
	return [False, 0, 0]

def up(board, word):
	
	return [False, 0, 0]

def downRight(board, word):
	
	return [False, 0, 0]

def downLeft(board, word):
	
	return [False, 0, 0]

def upRight(board, word):
	
	return [False, 0, 0]

def upLeft(board, word):
	
	return [False, 0, 0]



if __name__ == '__main__':
	board_filename = raw_input("Enter the file containing the board ==> ")
	print board_filename
	print # print an empty line

	# board is a list of strings (a bit simpler than the Sudoku structure)
	board = read_board(board_filename)

	# print the board, you must write this function
	print_board(board)

	print # print an empty line
	words_filename = raw_input("Enter the file containing the words ==> ")
	print words_filename

	print # print an empty line
	for line in open(words_filename):
		word = line.strip()
		find_word_in_puzzle(board, word)
